#!/usr/bin/env node

var fs  = require('fs'),
mesh    = require('../'),
celeri  = require('celeri'),
outcome = require('outcome'),
mesher  = mesh.mesher(),
colors  = require('colors'),
_       = require("underscore");


var onCmdResult = outcome.error(function(err) {
	
	console.error(err);

});


var replaceCwd = function(dir) {
	
	return dir.replace(/^\./, process.cwd() + '/.');

}

var dirFlags = {
	'--dir': 'The directory to use scan',
	'--out': 'the output directory'
}

/**
 */

celeri.option({
	command: 'fix input :platform',
	optional: dirFlags
}, function(ops, next) {

	var input = replaceCwd(ops.dir || './src'),
	output    = replaceCwd(ops.out || input + '/../mesh-lib') + '/' + ops.platform
	
	next(null, {
		input: input,
		output: output
	});

});


/**
 */

celeri.option({
	command: 'fix input :platform -> merge :platform',
	description: 'Prepares library for target platform',
	optional: dirFlags
}, function(ops, next) {

	var input = ops.input,
	output    = ops.output,
	platform  = ops.platform;

	console.log('Merging %s to %s', input.bold, platform.bold);


	mesher.merge({
		input: input,
		output: output,
		include: platform.split('+')
	}, onCmdResult.success(next));
});

/**
 */

celeri.option({
	command: 'merge :platform -> make :platform',
	description: 'Builds project for target platform',
	optional: dirFlags
}, function(ops) {

	mesher.make({
		input  : ops.input,
		output : ops.output,
		include: ops.platform.split('+')
	}, onCmdResult);

});


/**
 */


celeri.option({
	command: 'fix input :platform -> bootstrap OR bootstrap :platform',
	description: 'Creates a new project',
	optional: _.extend({
		'--all': 'include all platforms'
	}, dirFlags)
}, function(ops) {

	console.log(ops.input)
	
	mesher.bootstrap({
		output: ops.output,
		include: ops.platform ? ops.platform.split('+') : mesher.platforms()
	}, onCmdResult);
});


celeri.parse(process.argv);




