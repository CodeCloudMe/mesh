#!/usr/bin/env node

var mesh = require("../"),
celeri  = require('celeri'),
outcome = require('outcome'),
colors  = require('colors'),
_       = require("underscore"),
path    = require("path");


var on = outcome.error(function(err) {
	console.error(err.stack);
})



mesh.load(on.success(function(router) {
	

	loadCli(router);
	celeri.parse(process.argv);

}));

function replaceCwd(dir) {
		
		return dir.replace(/^\./, process.cwd() + '/.');

}

var dirFlags = {
	'--dir': 'The directory to use scan',
	'--out': 'the output directory'
}


function loadCli(router) {
	
	

	/**
	 */

	celeri.option({
		command: 'fix input OR fix input :platform',
		optional: dirFlags
	}, function(ops, next) {


		var input = replaceCwd(ops.input || '.'),
		output    = replaceCwd(ops.output || input + '/') + '/' + (ops.platform || '')
		
		next(null, {
			input: input,
			output: output
		});

	});


	/**
	 */

	celeri.option({
		command: 'fix input :platform -> merge :platform',
		description: 'Prepares library for target platform',
		optional: dirFlags
	}, function(ops, next) {

		var input = ops.input,
		output    = ops.output,
		platform  = ops.platform;

		console.log('Merging %s to %s', input.bold, platform.bold);


		router.
		request('merge').
		query(_.defaults({
			input: ops.input,
			platform: platform
		}, ops)).
		error(function(err) {
			console.log(err.stack);
		}).
		pull();
	});

	/**
	 */

	celeri.option({
		command: 'fix input :platform -> make :platform OR make :platform :phase',
		description: 'Builds project for target platform',
		optional: dirFlags
	}, function(ops) {


		router.
		request('make').
		query(_.defaults({
			input    : ops.input,
			target   : ops.target || "debug",
			platform : ops.platform
		}, ops)).
		error(function(err) {
			console.log(err.stack);
		}).
		pull();

	});


	/**
	 */


	celeri.option({
		command: 'fix input -> bootstrap OR bootstrap :platforms',
		description: 'Creates a new project',
		optional: _.extend({
			'--all': 'include all platforms',
			'--name': 'name of the project',
			'--description': 'description of the application',
			'--author': 'author of the program'
		}, dirFlags)
	}, function(ops) {

		router.
		request('bootstrap').
		query(_.defaults({
			output: path.normalize(ops.output),
			platforms: ops.platforms ? ops.platforms.split('+') : null
		}, ops)).
		error(function(err) {
			console.log(err.stack);
		}).
		pull();

	});


}