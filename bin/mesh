#!/usr/bin/env node


var capirona = require("capirona"),
async        = require("async"),
path         = require("path"),
_            = require("underscore"),
argv         = require("optimist").argv;

argv._.unshift("./package.json");


var scripts = [
	{
		"load": {
			"cwd": process.cwd(),
			"source": __dirname + "/../default/tasks"
		}
	}
],
commands    = [],
target      = _.extend({}, argv); 


async.forEach(argv._, function(arg, next) {


	if(arg.substr(0, 1).match(/[\.\/]/)) {

		try {

			var script = require(process.cwd() + "/" + arg);

			if(script.mesh) {
				_.defaults(target, script);
				delete target.mesh;
				script = script.mesh;
			}

			scripts.push(script);

		} catch(e) { 
			console.error("Unable to load %s", arg);
			console.log(e.stack)
		}


	} else {
		commands.push(arg);
	}


	next()

}, function() {
	target.cwd = process.cwd();
	var runner = capirona.run(scripts.concat(commands), target, function(err) {
		if(err) console.error(err.stack);
		if(argv.i || argv.interactive) {
			process.openStdin();
			waitForInput(runner);
		}
	}); 


});



function waitForInput(runner) {

	process.stdout.write("> ");
	process.stdin.once("data", function(data) {

		var command = String(data);

		try {
			command = JSON.parse(command);
		} catch(e) {
			// console.log(e)
		}

		runner.run(command, target, function(err) {
			if(err) console.error(err.stack);
			waitForInput(runner);
		});
	});
}