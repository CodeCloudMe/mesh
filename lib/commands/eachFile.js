// Generated by CoffeeScript 1.6.2
(function() {
  var fs, glob, path, watch_r, _getFiles, _watch;

  fs = require("fs");

  glob = require("glob");

  watch_r = require("watch_r");

  path = require("path");

  /*
  eachFile:
    input: /dir
    run:
      copy:
        output:
  */


  module.exports = {
    "def eachFile": {
      "params": {
        "watch": {
          "description": "watches the files"
        }
      },
      "run": [
        {
          "each": {
            "as": "input",
            "source": function(context, next) {
              var cwd, run;

              run = context.get("run");
              cwd = context.get("cwd") || process.cwd();
              return _getFiles(context, next);
            }
          }
        }, function(context, next) {
          next();
          if (!!context.get("watch")) {
            return _watch.call(this, context);
          }
        }
      ]
    }
  };

  /*
  */


  _getFiles = function(context, next) {
    var cwd, input;

    cwd = context.get("cwd") || process.cwd();
    input = context.get("input");
    return glob(input, {
      cwd: cwd
    }, function(err, files) {
      if (err != null) {
        return next(err);
      }
      files = files.map(function(file) {
        var e;

        try {
          return fs.realpathSync(cwd + "/" + file);
        } catch (_error) {
          e = _error;
          return file;
        }
      }).filter(function(file) {
        return !fs.statSync(file).isDirectory();
      });
      return next(null, files);
    });
  };

  /*
  */


  _watch = function(context) {
    var onChange, pt, _processing,
      _this = this;

    onChange = function(file) {
      return _this.run(context.get("run"), context.child({
        input: file
      }));
    };
    pt = context.get("input");
    pt = pt.replace(/\*\*.*/, "");
    _processing = {};
    return watch_r(pt, function(err, watcher) {
      watcher.on("new", function(target) {
        return onChange(target.path);
      });
      watcher.on("change", function(target) {
        return onChange(target.path);
      });
      return watcher.on("remove", function(target) {});
    });
  };

}).call(this);
